# Dali Center Home Assistant Integration
# Ruff configuration based on Home Assistant Core standards
# https://github.com/home-assistant/core/blob/dev/pyproject.toml

[project]
name = "ha-dali-center"
dynamic = ["version"]
dependencies = [
    "homeassistant>=2023.1.0",
    "async_timeout>=4.0.0",
    "voluptuous",
    "PySrDaliGateway==0.5.0",
]

[project.optional-dependencies]
dev = [
    "mypy>=1.16.0",
    "pytest",
    "pytest-cov",
    "pytest-asyncio",
    "ruff>=0.12.1", 
    "black",
    "isort",
    "pre-commit",
]

[tool.ruff]
required-version = ">=0.12.1"
target-version = "py311"

[tool.ruff.lint]
select = [
    "A001",   # Variable shadowing a Python builtin
    "ASYNC",  # flake8-async
    "B002",   # Python does not support unary prefix increment  
    "B005",   # Using .strip() with multi-character strings is misleading
    "B007",   # Loop control variable `i` not used within loop body
    "B014",   # Exception handler is an empty `except:`
    "B015",   # Pointless comparison. Did you mean to assign (=)?
    "B017",   # `pytest.raises(BaseException)` should be considered evil
    "B018",   # Found useless expression. Either assign it to a variable or remove it.
    "B025",   # Exception must not use an empty `except` block
    "B026",   # Star-arg unpacking after a keyword argument is strongly discouraged
    "B904",   # Use `raise ... from err` or `raise ... from None`
    "B905",   # `zip()` without an explicit `strict=` parameter
    "C",      # complexity
    "COM818", # Trailing comma on bare tuple prohibited
    "D",      # docstrings
    "DTZ003", # Use `datetime.now(tz=)` instead of `datetime.utcnow()`
    "DTZ004", # Use `datetime.fromtimestamp(ts, tz=)` instead of `datetime.utcfromtimestamp(ts)`
    "E",      # pycodestyle
    "F",      # pyflakes/autoflake
    "G",      # flake8-logging-format
    "I",      # isort
    "ICN001", # import concentions; {name} should be imported as {asname}
    "LOG",    # flake8-logging
    "N804",   # First argument of a class method should be named cls
    "N805",   # First argument of a method should be named self
    "N815",   # Variable in class scope should not be mixedCase
    "PERF",   # Perflint
    "PGH004", # Use specific rule codes when using noqa
    "PIE",    # flake8-pie
    "PL",     # pylint
    "PT",     # flake8-pytest-style
    "PTH",    # flake8-use-pathlib
    "PYI",    # flake8-pyi
    "RET",    # flake8-return
    "RSE",    # flake8-raise
    "RUF005", # Consider iterable unpacking instead of concatenation
    "RUF006", # Store a reference to the return value of asyncio.create_task
    "RUF010", # Use explicit conversion flag
    "RUF013", # PEP 484 prohibits implicit Optional
    "RUF018", # Avoid assignment expressions in assert statements
    "RUF019", # Unnecessary key check before dictionary access
    "S102",   # Use of exec detected
    "S103",   # bad-file-permissions
    "S108",   # hardcoded-temp-file
    "S306",   # suspicious-mktemp-usage
    "S307",   # suspicious-eval-usage
    "S313",   # suspicious-xmlc-element-tree-usage
    "S314",   # suspicious-xml-element-tree-usage
    "S315",   # suspicious-xml-expat-reader-usage
    "S316",   # suspicious-xml-expat-builder-usage
    "S317",   # suspicious-xml-sax-usage
    "S318",   # suspicious-xml-mini-dom-usage
    "S319",   # suspicious-xml-pull-dom-usage
    "S601",   # paramiko-call
    "S602",   # subprocess-popen-with-shell-equals-true
    "S604",   # call-with-shell-equals-true
    "S608",   # hardcoded-sql-expression
    "S609",   # unix-command-wildcard-injection
    "SIM",    # flake8-simplify
    "SLF",    # flake8-self
    "SLOT",   # flake8-slots
    "T100",   # Trace found: {name} imported
    "T20",    # flake8-print
    "TID251", # Banned imports
    "TRY",    # tryceratops
    "UP",     # pyupgrade
    "W",      # pycodestyle
]

ignore = [
    "D100",    # Missing docstring in public module
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
    "D105",    # Missing docstring in magic method
    "D106",    # Missing docstring in public nested class
    "D107",    # Missing docstring in `__init__`
    "D202",    # No blank lines after function docstring
    "D203",    # 1 blank line required before class docstring
    "D213",    # Multi-line docstring summary should start at the second line
    "D406",    # Section name should end with a newline
    "D407",    # Section name underlining
    "D411",    # Missing blank line before section
    "D412",    # No blank lines allowed between a section header and its content
    "D413",    # Missing blank line after last section
    "E501",    # Line too long (black will handle)
    "PLC0415", # `import` should be placed at the top of the module
    "PLR0911", # Too many arguments to function call
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments in function definition
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison
    "PT006",   # Wrong name(s) type in `@pytest.mark.parametrize`
    "PT018",   # Assertion should be broken down into multiple parts
    "RET504",  # Unnecessary variable assignment before `return` statement
    "RUF012",  # Mutable class attributes should be annotated with `typing.ClassVar`
    "SIM102",  # Use a single if-statement instead of nested if-statements
    "SIM108",  # Use ternary operator instead of if-else-block
    "SIM115",  # Use context handler for opening files
    "TRY003",  # Avoid specifying long messages outside the exception class
    "TRY301",  # Abstract `raise` to an inner function
    "UP006",   # keep type annotation style as is
    "UP007",   # keep type annotation style as is
    "UP038",   # Use `X | Y` in `isinstance` call instead of `(X, Y)`
]

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
voluptuous = "vol"
"homeassistant.components.dali_center" = "dali_center"

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"async_timeout".msg = "use asyncio.timeout instead"

[tool.ruff.lint.isort]
force-sort-within-sections = true
known-first-party = [
    "homeassistant",
]
combine-as-imports = true
split-on-trailing-comma = true

[tool.ruff.lint.mccabe]
max-complexity = 25

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D",      # Don't require docstrings in tests
    "PLC2701", # Private name import
    "PLR2004", # Magic value used in comparison
    "S101",    # Use of assert detected
    "SLF001",  # Private member accessed
    "T201",    # print found
]

[tool.ruff.lint.pylint]
max-args = 10
